<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NingSo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ningso.me/"/>
  <updated>2017-08-23T10:27:00.000Z</updated>
  <id>http://ningso.me/</id>
  
  <author>
    <name>NingSo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Andorid Studio NDK快捷编译配置</title>
    <link href="http://ningso.me/AndoridStudio-NDK-Quick-Build-configuration/"/>
    <id>http://ningso.me/AndoridStudio-NDK-Quick-Build-configuration/</id>
    <published>2017-07-19T14:16:00.000Z</published>
    <updated>2017-08-23T10:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Andorid-Studio-NDK快捷编译配置"><a href="#Andorid-Studio-NDK快捷编译配置" class="headerlink" title="Andorid Studio NDK快捷编译配置"></a>Andorid Studio NDK快捷编译配置</h1><blockquote>
<p>接触Jni的时候，最繁琐的就是去生成<code>.h</code>头文件，以前很笨的方法就是通过javah工具生成.h头文件，还要各种指定路径等繁琐操作,写着写着就有点烦人。现在介绍一种更快捷的方式，通过配置快捷键的形式一劳永逸。</p>
</blockquote>
<a id="more"></a>
<h3 id="快捷配置效果预览"><a href="#快捷配置效果预览" class="headerlink" title="快捷配置效果预览"></a>快捷配置效果预览</h3><p><img src="https://dn-ningso.qbox.me/blog/image/android_ndk_.png" alt="enter image description here"><br><img src="https://dn-ningso.qbox.me/blog/image/android_ndk_externaltool.png?imageView2/0/q/90|watermark/2/text/TmluZ1Nv/font/Y29taWMgc2FucyBtcw==/fontsize/280/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt="enter image description here"></p>
<h3 id="javah"><a href="#javah" class="headerlink" title="javah"></a>javah</h3><p><img src="https://dn-ningso.qbox.me/blog/image/android_ndk_javah.png?imageView2/0/q/90|watermark/2/text/TmluZ1Nv/font/Y29taWMgc2FucyBtcw==/fontsize/280/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt="ndk javah"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">javah</div><div class="line">Program:$JDKPath$/bin/javah</div><div class="line">Parameters:-encoding UTF-8 -d ../jni -jni $FileClass$</div><div class="line">Working directory:$ModuleFileDir$/src/main/java</div></pre></td></tr></table></figure></p>
<h3 id="ndk-build"><a href="#ndk-build" class="headerlink" title="ndk-build"></a>ndk-build</h3><p><img src="https://dn-ningso.qbox.me/blog/image/android_ndk_build.png?imageView2/0/q/90|watermark/2/text/TmluZ1Nv/font/Y29taWMgc2FucyBtcw==/fontsize/280/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt="enter image description here"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ndk-build</div><div class="line">Program:/Users/Liam/Library/Android/sdk/ndk-bundle/build/ndk-build</div><div class="line">Parameters:</div><div class="line">Working directory:$ModuleFileDir$/src/main</div></pre></td></tr></table></figure>
<h3 id="ndk-build-clean"><a href="#ndk-build-clean" class="headerlink" title="ndk-build clean"></a>ndk-build clean</h3><p><img src="https://dn-ningso.qbox.me/blog/image/android_ndk_build_clean.png?imageView2/0/q/90|watermark/2/text/TmluZ1Nv/font/Y29taWMgc2FucyBtcw==/fontsize/280/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt="ndk build clean"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ndk-build clean</div><div class="line">Program:/Users/Liam/Library/Android/sdk/ndk-bundle/build/ndk-build</div><div class="line">Parameters:clean</div><div class="line">Working directory:$ModuleFileDir$/src/main</div></pre></td></tr></table></figure></p>
<h3 id="NDK开发常见的一些错误："><a href="#NDK开发常见的一些错误：" class="headerlink" title="NDK开发常见的一些错误："></a>NDK开发常见的一些错误：</h3><h4 id="Error-1"><a href="#Error-1" class="headerlink" title="Error 1"></a>Error 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UnsatisfiedLinkError: No implementation found for int com.liam.nativeplugin.nativeutils.SymLink.createSymLinkJNI(java.lang.String, java.lang.String) </div><div class="line">(tried Java_com_liam_nativeplugin_nativeutils_SymLink_createSymLinkJNI and Java_com_liam_nativeplugin_nativeutils_SymLink_createSymLinkJNI__Ljava_lang_String_2Ljava_lang_String_2)</div></pre></td></tr></table></figure>
<p>这是刚接触的时候最会遇到的错误类型了，意思就是会所，<code>.c</code>文件定义的JNI接口类型是<code>Java_com_liam_nativeplugin_nativeutils_SymLink_createSymLinkJNI</code> 即包名必须为<code>com.liam.nativeplugin.nativeutils</code>,类名为必须为<code>SymLink</code>。<br>也就是说，我们.so中函数声明涉及到的package name和class name与调用它的package name和class name不符。因此我们要改变我们工程中的package name和class name。使其与.so文件中函数签名提示的一致，在这个类中加入native方法的声明。<br>知道了这个规则，那么错误解决方案自然也就懂了。修改正确的package name和class name重新编译一下就好了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Andorid-Studio-NDK快捷编译配置&quot;&gt;&lt;a href=&quot;#Andorid-Studio-NDK快捷编译配置&quot; class=&quot;headerlink&quot; title=&quot;Andorid Studio NDK快捷编译配置&quot;&gt;&lt;/a&gt;Andorid Studio NDK快捷编译配置&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;接触Jni的时候，最繁琐的就是去生成&lt;code&gt;.h&lt;/code&gt;头文件，以前很笨的方法就是通过javah工具生成.h头文件，还要各种指定路径等繁琐操作,写着写着就有点烦人。现在介绍一种更快捷的方式，通过配置快捷键的形式一劳永逸。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ningso.me/categories/Android/"/>
    
      <category term="DevTools" scheme="http://ningso.me/categories/Android/DevTools/"/>
    
    
      <category term="NDK" scheme="http://ningso.me/tags/NDK/"/>
    
      <category term="Jni" scheme="http://ningso.me/tags/Jni/"/>
    
  </entry>
  
  <entry>
    <title>git命令多敲就能记住了</title>
    <link href="http://ningso.me/How-to-use-git/"/>
    <id>http://ningso.me/How-to-use-git/</id>
    <published>2017-04-01T10:37:57.000Z</published>
    <updated>2017-03-10T10:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="git查看某个文件的修改历史"><a href="#git查看某个文件的修改历史" class="headerlink" title="git查看某个文件的修改历史"></a>git查看某个文件的修改历史</h3><ul>
<li>git log –pretty=oneline filename</li>
<li>git log filename 可以看到fileName相关的commit记录</li>
<li>git log -p filename 可以显示每次提交的diff<br>只看某次提交中的某个文件变化，可以直接加上fileName</li>
<li>git show c5e69804bbd9725b5dece57f8cbece4a96b9f80b filename</li>
<li>git rm -r e fileName 删除git服务器追踪文件文件但不删除本地文件</li>
</ul>
<a id="more"></a>
<h3 id="Update-a-fork-and-restart-it-from-the-upstream"><a href="#Update-a-fork-and-restart-it-from-the-upstream" class="headerlink" title="Update a fork and restart it from the upstream"></a>Update a fork and restart it from the upstream</h3><ul>
<li>git remote add upstream git@github.com:XXXXXXXX.git</li>
<li>git fetch upstream</li>
<li>git rebase upstream/master</li>
<li>git pull upstream/master</li>
<li>git push origin master</li>
<li>git rebase –abort</li>
</ul>
<h3 id="git-一个分支完全替换另一个分支"><a href="#git-一个分支完全替换另一个分支" class="headerlink" title="git 一个分支完全替换另一个分支"></a>git 一个分支完全替换另一个分支</h3><ul>
<li>git checkout master</li>
<li>git reset –hard upstream/master  </li>
<li>git push origin master –force </li>
</ul>
<h3 id="cherry-pick的使用"><a href="#cherry-pick的使用" class="headerlink" title="cherry-pick的使用"></a>cherry-pick的使用</h3><ul>
<li>git cherry-pick [commitID] 提取一个commit</li>
<li>git cherry-pick [commitIDA]..[commitIDB] <code>从A到B的所有commit，但不包含A，包含B</code></li>
<li>git cherry-pick [commitIDA]^..[commitIDB] <code>包含从A到B的所有commit，但包含A也包含B</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;git查看某个文件的修改历史&quot;&gt;&lt;a href=&quot;#git查看某个文件的修改历史&quot; class=&quot;headerlink&quot; title=&quot;git查看某个文件的修改历史&quot;&gt;&lt;/a&gt;git查看某个文件的修改历史&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git log –pretty=oneline filename&lt;/li&gt;
&lt;li&gt;git log filename 可以看到fileName相关的commit记录&lt;/li&gt;
&lt;li&gt;git log -p filename 可以显示每次提交的diff&lt;br&gt;只看某次提交中的某个文件变化，可以直接加上fileName&lt;/li&gt;
&lt;li&gt;git show c5e69804bbd9725b5dece57f8cbece4a96b9f80b filename&lt;/li&gt;
&lt;li&gt;git rm -r e fileName 删除git服务器追踪文件文件但不删除本地文件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="DevTools" scheme="http://ningso.me/categories/DevTools/"/>
    
    
      <category term="git" scheme="http://ningso.me/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo过程中遇到的问题</title>
    <link href="http://ningso.me/Hexo%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://ningso.me/Hexo遇到的问题/</id>
    <published>2017-01-19T14:16:00.000Z</published>
    <updated>2017-04-10T10:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="执行npm-install-g-hexo-cli时报错：如下图"><a href="#执行npm-install-g-hexo-cli时报错：如下图" class="headerlink" title="执行npm install -g hexo-cli时报错：如下图"></a>执行<code>npm install -g hexo-cli</code>时报错：如下图</h3><p><img src="https://dn-ningso.qbox.me/blog/permission-denied.png?imageView2/0/q/90|watermark/2/text/TmluZ1Nv/font/Y29taWMgc2FucyBtcw==/fontsize/280/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim" alt="EACCES: permission denied, access &#39;/usr/local/lib/node_modules"><br>提示没有/usr/local/lib/node_modules路径没有权限</p>
<p>解决方法：执行该命令行获取权限<code>sudo chown -R $USER /usr/local/lib/node_modules</code></p>
<p>参考来源: <a href="http://stackoverflow.com/questions/16151018/npm-throws-error-without-sudo" target="_blank" rel="external">npm throws error without sudo</a></p>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;执行npm-install-g-hexo-cli时报错：如下图&quot;&gt;&lt;a href=&quot;#执行npm-install-g-hexo-cli时报错：如下图&quot; class=&quot;headerlink&quot; title=&quot;执行npm install -g hexo-cli时报错：如下图&quot;&gt;&lt;/a&gt;执行&lt;code&gt;npm install -g hexo-cli&lt;/code&gt;时报错：如下图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://dn-ningso.qbox.me/blog/permission-denied.png?imageView2/0/q/90|watermark/2/text/TmluZ1Nv/font/Y29taWMgc2FucyBtcw==/fontsize/280/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim&quot; alt=&quot;EACCES: permission denied, access &amp;#39;/usr/local/lib/node_modules&quot;&gt;&lt;br&gt;提示没有/usr/local/lib/node_modules路径没有权限&lt;/p&gt;
&lt;p&gt;解决方法：执行该命令行获取权限&lt;code&gt;sudo chown -R $USER /usr/local/lib/node_modules&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;参考来源: &lt;a href=&quot;http://stackoverflow.com/questions/16151018/npm-throws-error-without-sudo&quot;&gt;npm throws error without sudo&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://ningso.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://ningso.me/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>JobScheduler 遇到的一些小问题</title>
    <link href="http://ningso.me/JobScheduler%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://ningso.me/JobScheduler遇到的一些小问题/</id>
    <published>2017-01-19T14:16:00.000Z</published>
    <updated>2017-03-10T10:27:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Working-on-Android-Nougat"><a href="#Working-on-Android-Nougat" class="headerlink" title="Working on Android Nougat"></a>Working on Android Nougat</h3><p>在Android7.0上设置jobinfoBuilder.setPeriodic(5 * 1000);为5秒时，看到系统自己打印出来的logo,当时没太留意，然而问题出来了，我勒个去？？等了好久都没执行<code>onStartJob()</code>方法，但是看设置schedule()的时候确实返回的是成功啊。最后注意到这个结果！！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">W/JobInfo: Specified interval for 1 is +5s0ms. Clamped to +15m0s0ms</div><div class="line">W/JobInfo: Specified flex for 1 is +5s0ms. Clamped to +5m0s0ms</div></pre></td></tr></table></figure>
<p>就是说指定周期间隔时间为5seconds，被强制指定为15minutes,<br>指定弹性延迟时间为5seconds，被强制指定为5minutes！！<br>这就日狗了。难道是因为Android Nuga的出了省电模式之后自己改了？？</p>
<a id="more"></a>
<p><img src="https://dn-ningso.qbox.me/blog/WX20161208-194549.png" alt="working on Nougat"></p>
<p>跟踪到API24源码我们发现：在JobInfo中设置了最小间隔时间和最小弹性时间，如果设置的比改值还小，则取默认值。。。千万只草泥马有没有。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/* Minimum interval for a periodic job, in milliseconds. */</div><div class="line">   private static final long MIN_PERIOD_MILLIS = 15 * 60 * 1000L;   // 15 minutes</div><div class="line"></div><div class="line">/* Minimum flex for a periodic job, in milliseconds. */</div><div class="line">   private static final long MIN_FLEX_MILLIS = 5 * 60 * 1000L; // 5 minutes</div><div class="line">      /**</div><div class="line">    * Set to the interval between occurrences of this job. This value is &lt;b&gt;not&lt;/b&gt; set if the</div><div class="line">    * job does not recur periodically.</div><div class="line">    */</div><div class="line">   public long getIntervalMillis() &#123;</div><div class="line">       return intervalMillis &gt;= getMinPeriodMillis() ? intervalMillis : getMinPeriodMillis();//看！！这里！！</div><div class="line">   &#125;</div><div class="line">&lt;---省略若干无关代码---&gt;</div><div class="line">   /**</div><div class="line">    * Flex time for this job. Only valid if this is a periodic job.  The job can</div><div class="line">    * execute at any time in a window of flex length at the end of the period.</div><div class="line">    */</div><div class="line">   public long getFlexMillis() &#123;</div><div class="line">       long interval = getIntervalMillis();</div><div class="line">       long percentClamp = 5 * interval / 100;</div><div class="line">       long clampedFlex = Math.max(flexMillis, Math.max(percentClamp, getMinFlexMillis()));//看！！这里！！</div><div class="line">       return clampedFlex &lt;= interval ? clampedFlex : interval;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>在API为23的时候并没有这些，也就是说在24及以上版本会出现这样的问题。<br>作为解决方法，如果作业间隔小于15分钟，可以使用以下代码以定期间隔调度作业。不过该方式只能被执行一次。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">JobInfo jobInfo;</div><div class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</div><div class="line">  jobInfo = <span class="keyword">new</span> JobInfo.Builder(JOB_ID, serviceName)</div><div class="line">      .setMinimumLatency(REFRESH_INTERVAL)</div><div class="line">      .setExtras(bundle).build();</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  jobInfo = <span class="keyword">new</span> JobInfo.Builder(JOB_ID, serviceName)</div><div class="line">      .setPeriodic(REFRESH_INTERVAL)</div><div class="line">      .setExtras(bundle).build();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考链接：</p>
<ul>
<li><a href="http://stackoverflow.com/questions/38344220/job-scheduler-not-running-on-android-n" target="_blank" rel="external">stackoverflow</a></li>
<li><a href="https://code.google.com/p/android/issues/detail?id=81265" target="_blank" rel="external">Android Open Source Issue</a></li>
</ul>
<h3 id="setPersisted-true-导致crash"><a href="#setPersisted-true-导致crash" class="headerlink" title="setPersisted(true) 导致crash"></a>setPersisted(true) 导致crash</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Working-on-Android-Nougat&quot;&gt;&lt;a href=&quot;#Working-on-Android-Nougat&quot; class=&quot;headerlink&quot; title=&quot;Working on Android Nougat&quot;&gt;&lt;/a&gt;Working on Android Nougat&lt;/h3&gt;&lt;p&gt;在Android7.0上设置jobinfoBuilder.setPeriodic(5 * 1000);为5秒时，看到系统自己打印出来的logo,当时没太留意，然而问题出来了，我勒个去？？等了好久都没执行&lt;code&gt;onStartJob()&lt;/code&gt;方法，但是看设置schedule()的时候确实返回的是成功啊。最后注意到这个结果！！&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;W/JobInfo: Specified interval for 1 is +5s0ms. Clamped to +15m0s0ms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;W/JobInfo: Specified flex for 1 is +5s0ms. Clamped to +5m0s0ms&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就是说指定周期间隔时间为5seconds，被强制指定为15minutes,&lt;br&gt;指定弹性延迟时间为5seconds，被强制指定为5minutes！！&lt;br&gt;这就日狗了。难道是因为Android Nuga的出了省电模式之后自己改了？？&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ningso.me/categories/Android/"/>
    
    
      <category term="JobScheduler" scheme="http://ningso.me/tags/JobScheduler/"/>
    
  </entry>
  
  <entry>
    <title>使用TexturePacker对资源图进行打包的两种方法</title>
    <link href="http://ningso.me/TexturePacker/"/>
    <id>http://ningso.me/TexturePacker/</id>
    <published>2016-11-29T08:16:16.000Z</published>
    <updated>2017-04-11T02:39:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方式一：执行jar方式"><a href="#方式一：执行jar方式" class="headerlink" title="方式一：执行jar方式"></a>方式一：执行jar方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar runnable-texturepacker.jar [inputDir] [outputDir] [packFileName]</div></pre></td></tr></table></figure>
<p>注意：第一个参数资源文件路径必填项，后面两参数为可选项<br><a href="https://pan.baidu.com/s/1jHCNpQ2" target="_blank" rel="external">runnable-texturepacker.jar</a>下载</p>
<h3 id="方式二：通过Android-Studio的Gradle"><a href="#方式二：通过Android-Studio的Gradle" class="headerlink" title="方式二：通过Android Studio的Gradle"></a>方式二：通过Android Studio的Gradle</h3><p>在项目全局<code>build.gradle</code>中引入环境</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:2.2.2&apos;</div><div class="line">        classpath &apos;com.badlogicgames.gdx:gdx-tools:1.9.4&apos; //版本号根据自己使用的libdgx来定。</div><div class="line">        // NOTE: Do not place your application dependencies here; they belong</div><div class="line">        // in the individual module build.gradle files</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 定义一个变量texturePacker并设置想传递的参数...参数一：资源所在文件夹路径，参数二：生成的打包图片所存放的文件路径，参数三：packFileName包文件的名称。同时也作用于图片名。</div><div class="line">project.ext.texturePacker = [rootDir.getPath() + &quot;/app/src/main/atlas&quot;, rootDir.getPath() + &quot;/app/src/main/assets&quot;, &quot;atlas_flip&quot;]</div><div class="line"></div><div class="line">// 导入texturepacker的引用</div><div class="line">import com.badlogic.gdx.tools.texturepacker.TexturePacker</div><div class="line"></div><div class="line">// 添加一个生存进行图片资源打包的task </div><div class="line">task texturePacker &lt;&lt; &#123;</div><div class="line">    if (project.ext.has(&apos;texturePacker&apos;)) &#123;</div><div class="line">        logger.info &quot;Calling TexturePacker: &quot; + texturePacker</div><div class="line">        TexturePacker.process(texturePacker[0], texturePacker[1], texturePacker[2])</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后在执行这个task<code>./gradlew texturePacker</code>即可</p>
<h3 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源:"></a>参考来源:</h3><p><a href="https://github.com/libgdx/libgdx/wiki/Texture-packer#running-texturepacker" target="_blank" rel="external">libgdx wiki</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方式一：执行jar方式&quot;&gt;&lt;a href=&quot;#方式一：执行jar方式&quot; class=&quot;headerlink&quot; title=&quot;方式一：执行jar方式&quot;&gt;&lt;/a&gt;方式一：执行jar方式&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;java -jar runnable-texturepacker.jar [inputDir] [outputDir] [packFileName]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：第一个参数资源文件路径必填项，后面两参数为可选项&lt;br&gt;&lt;a href=&quot;https://pan.baidu.com/s/1jHCNpQ2&quot;&gt;runnable-texturepacker.jar&lt;/a&gt;下载&lt;/p&gt;
&lt;h3 id=&quot;方式二：通过Android-Studio的Gradle&quot;&gt;&lt;a href=&quot;#方式二：通过Android-Studio的Gradle&quot; class=&quot;headerlink&quot; title=&quot;方式二：通过Android Studio的Gradle&quot;&gt;&lt;/a&gt;方式二：通过Android Studio的Gradle&lt;/h3&gt;&lt;p&gt;在项目全局&lt;code&gt;build.gradle&lt;/code&gt;中引入环境&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ningso.me/categories/Android/"/>
    
    
      <category term="TexturePacker" scheme="http://ningso.me/tags/TexturePacker/"/>
    
      <category term="Gradle" scheme="http://ningso.me/tags/Gradle/"/>
    
      <category term="Libgdx" scheme="http://ningso.me/tags/Libgdx/"/>
    
  </entry>
  
  <entry>
    <title>adb常用命令总结</title>
    <link href="http://ningso.me/ADB%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://ningso.me/ADB常用命令总结/</id>
    <published>2016-06-23T15:26:13.000Z</published>
    <updated>2017-09-11T11:09:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ADB命令"><a href="#ADB命令" class="headerlink" title="ADB命令"></a>ADB命令</h2><ul>
<li>adb shell cat [file] <code>查看文件内容</code></li>
<li>adb shell service list <code>查看后台服务信息</code></li>
<li>adb push [local] [remote] <code>将电脑本地文件拷贝到手机设备</code></li>
<li>adb pull [remote] [local] <code>把文件从设备复制到本地电脑</code></li>
<li>adb shell monkey -v -p [packagename] 500 <code>执行monkey命令</code></li>
<li>adb shell dumpsys activity top  <code>查看栈顶activity的信息</code></li>
<li>adb shell dumpsys activity | grep mFocusedActivities <code>只查看栈顶Activity名称</code></li>
<li>adb shell pm clear [packagename] <code>清除应用数据</code></li>
<li>adb shell ifconfig [|grep addr]<code>查看ip等地址信息</code></li>
</ul>
<h2 id="AAPT命令"><a href="#AAPT命令" class="headerlink" title="AAPT命令"></a>AAPT命令</h2><p> Android asset packaging tool</p>
<ul>
<li>aapt list filepath.apk <code>列出apk的所有资源文件目录清单</code></li>
<li>aapt list -v filepath.apk </li>
<li>aapt d[ump] [values] file.{apk} </li>
</ul>
<blockquote>
<p>下面的四个参值为values的值</p>
<ul>
<li><code>badging</code> 查看apk的包名，laber 权限等所有信息</li>
<li><code>permissions</code> 查看apk权限</li>
<li><code>resources</code> 打印的所有资源文件列表</li>
<li><code>configurations</code> 查看apk配置信息</li>
</ul>
</blockquote>
<h2 id="终端命令更新SDK"><a href="#终端命令更新SDK" class="headerlink" title="终端命令更新SDK"></a>终端命令更新SDK</h2><ul>
<li>android list sdk <code>查看已安装完成的包</code> </li>
<li>android list sdk –all <code>列举出所有可安装更新包的序列号</code></li>
<li>android update sdk –no-ui –filter 1,2,3… <code>下载更新对应序列号的包</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ADB命令&quot;&gt;&lt;a href=&quot;#ADB命令&quot; class=&quot;headerlink&quot; title=&quot;ADB命令&quot;&gt;&lt;/a&gt;ADB命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;adb shell cat [file] &lt;code&gt;查看文件内容&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ad
    
    </summary>
    
      <category term="DevTools" scheme="http://ningso.me/categories/DevTools/"/>
    
    
      <category term="ADB" scheme="http://ningso.me/tags/ADB/"/>
    
  </entry>
  
  <entry>
    <title>KeyTool的基本使用方式</title>
    <link href="http://ningso.me/How-To-Use-KeyTool/"/>
    <id>http://ningso.me/How-To-Use-KeyTool/</id>
    <published>2016-02-02T15:52:42.000Z</published>
    <updated>2017-08-23T14:43:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="keytool-创建签名keystore"><a href="#keytool-创建签名keystore" class="headerlink" title="keytool 创建签名keystore"></a>keytool 创建签名<code>keystore</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkey -alias Test -keyalg RSA -sigalg SHA1withRSA -validity 8030 -keystore ./xxxx.keystore -dname &quot;EMAILADDRESS=android.os@samsung.com, CN=Samsung Cert, OU=DMC, O=Samsung Corporation, L=Suwon City, ST=South Korea, C=KR&quot;</div></pre></td></tr></table></figure>
<blockquote>
<p>-dname       指定证书拥有者信息 例如：  “CN=名字与姓氏,OU=组织单位名称,O=组织名称,L=城市或区域名称,ST=州或省份名称,C=单位的两字母国家代码”</p>
</blockquote>
<p>结果:<br><img src="http://7xiowj.com1.z0.glb.clouddn.com/QQ20160203-1@2x.png" alt="创建签名"></p>
<h3 id="Keytool-查看keystore的签名信息"><a href="#Keytool-查看keystore的签名信息" class="headerlink" title="Keytool 查看keystore的签名信息"></a>Keytool 查看keystore的签名信息</h3><p>执行如下命令，并按照提示输入keystore 密码</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -list -v -keystore XXXX.keystore</div></pre></td></tr></table></figure>
<p>结果：<br><img src="http://7xiowj.com1.z0.glb.clouddn.com/QQ20160203-0@2x.png" alt="keystore的签名信息"></p>
<h3 id="Keytool-查看apk的签名信息"><a href="#Keytool-查看apk的签名信息" class="headerlink" title="Keytool 查看apk的签名信息"></a>Keytool 查看apk的签名信息</h3><p>解压apk得到META-INF文件夹下面的RSA文件，执行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -printcert -file XXX/META-INF/CERT.RSA</div></pre></td></tr></table></figure></p>
<p> 结果：<br><img src="http://7xiowj.com1.z0.glb.clouddn.com/QQ20160203-2@2x.png" alt="查看apk的签名信息"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;keytool-创建签名keystore&quot;&gt;&lt;a href=&quot;#keytool-创建签名keystore&quot; class=&quot;headerlink&quot; title=&quot;keytool 创建签名keystore&quot;&gt;&lt;/a&gt;keytool 创建签名&lt;code&gt;keystore&lt;/code&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;keytool -genkey -alias Test -keyalg RSA -sigalg SHA1withRSA -validity 8030 -keystore ./xxxx.keystore -dname &amp;quot;EMAILADDRESS=android.os@samsung.com, CN=Samsung Cert, OU=DMC, O=Samsung Corporation, L=Suwon City, ST=South Korea, C=KR&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;-dname       指定证书拥有者信息 例如：  “CN=名字与姓氏,OU=组织单位名称,O=组织名称,L=城市或区域名称,ST=州或省份名称,C=单位的两字母国家代码”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结果:&lt;br&gt;&lt;img src=&quot;http://7xiowj.com1.z0.glb.clouddn.com/QQ20160203-1@2x.png&quot; alt=&quot;创建签名&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Keytool-查看keystore的签名信息&quot;&gt;&lt;a href=&quot;#Keytool-查看keystore的签名信息&quot; class=&quot;headerlink&quot; title=&quot;Keytool 查看keystore的签名信息&quot;&gt;&lt;/a&gt;Keytool 查看keystore的签名信息&lt;/h3&gt;&lt;p&gt;执行如下命令，并按照提示输入keystore 密码&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ningso.me/categories/Android/"/>
    
    
      <category term="KeyTool" scheme="http://ningso.me/tags/KeyTool/"/>
    
  </entry>
  
  <entry>
    <title>How to Root Nexus6 Devices on Android Marshmallow 6.0</title>
    <link href="http://ningso.me/How-to-Root-on-Nexus6-Android6-0/"/>
    <id>http://ningso.me/How-to-Root-on-Nexus6-Android6-0/</id>
    <published>2015-12-19T14:16:16.000Z</published>
    <updated>2017-04-11T02:41:51.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>教程</p>
</blockquote>
<ul>
<li><a href="http://www.ibtimes.co.uk/how-root-android-6-0-marshmallow-build-mra58k-nexus-5-6-7-9-nexus-player-1522653" target="_blank" rel="external">网页教程</a></li>
<li><a href="https://www.youtube.com/watch?v=HmpaxJJOhi0" target="_blank" rel="external">视频教程</a></li>
</ul>
<blockquote>
<p>材料准备</p>
</blockquote>
<ul>
<li><a href="https://twrp.me/devices/motorolanexus6.html" target="_blank" rel="external">下载twrp包</a></li>
<li><a href="http://elementalx.org/devices/nexus-6/" target="_blank" rel="external">下载supperSu 和elementalX 包</a></li>
</ul>
<blockquote>
<p>操作</p>
</blockquote>
<p>1、将SuperSu.zip和ElementalX.zip复制到ni的sd卡的目录下<br>2、将手机关机进入到Bootloader模式，并将数据线连接电脑（安装包adb环境）<br>3、执行 fastboot flash recovery twrp-2.8.7.1-shamu.img<br>4、然后拔去数据线连接，用手机音量减键选择Recovery mode并确认进入<br>5、滑动<code>swipe to Allow Modifications</code> –&gt;点击<code>install</code><br>6、找到复制到SD卡里面的<code>ElementalX.zip</code>并点击<br>7、滑动<code>swpie to Confim Flash</code> –&gt;<code>next</code><br>8、选择- [x]<code>I Agree with these Terms of Use</code>–&gt;<code>next</code>–&gt;看到弹窗框<code>ok</code><br>9、连续点<code>next</code>最后没了在选择点击<code>install ElementalX</code>–&gt;<code>finish</code><br>10、滑动<code>swipe to Unlock</code>解锁<br>11、<code>Wipe Cache&amp;Dalvik</code>–&gt;<code>Swipe to Wipe</code>–&gt;<code>Back</code><br>12、点击选择复制到SD卡里面的<code>SuperSu.zip</code>–&gt;<code>swipe to Confirm Flash</code><br>13、再次执行一边操作<code>Wipe Cache&amp;Dalvik</code>–&gt;<code>Swipe to Wipe</code>—&gt;<code>Back</code><br>14、最后点击<code>Reboot System</code>重启手机可以在桌面看到如下图我手机一样的SuperSu图标了</p>
<a id="more"></a>
<blockquote>
<p>以上步骤都是根据视屏里面讲解来的，翻不了墙没办法打开Youtube视频的可以直接安装上面操作步骤来做。</p>
</blockquote>
<hr>
<p><img src="https://dn-ningso.qbox.me/image/git-markdown/shuaroot1.png" alt="Paste_Image.png"></p>
<p><img src="https://dn-ningso.qbox.me/image/git-markdown/shuaroot2.png" alt="Paste_Image.png"></p>
<p><img src="https://dn-ningso.qbox.me/image/git-markdown/shauroot3.png" alt="Paste_Image.png"></p>
<ul>
<li>如有不懂欢迎留言</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;教程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibtimes.co.uk/how-root-android-6-0-marshmallow-build-mra58k-nexus-5-6-7-9-nexus-player-1522653&quot;&gt;网页教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HmpaxJJOhi0&quot;&gt;视频教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;材料准备&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twrp.me/devices/motorolanexus6.html&quot;&gt;下载twrp包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://elementalx.org/devices/nexus-6/&quot;&gt;下载supperSu 和elementalX 包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、将SuperSu.zip和ElementalX.zip复制到ni的sd卡的目录下&lt;br&gt;2、将手机关机进入到Bootloader模式，并将数据线连接电脑（安装包adb环境）&lt;br&gt;3、执行 fastboot flash recovery twrp-2.8.7.1-shamu.img&lt;br&gt;4、然后拔去数据线连接，用手机音量减键选择Recovery mode并确认进入&lt;br&gt;5、滑动&lt;code&gt;swipe to Allow Modifications&lt;/code&gt; –&amp;gt;点击&lt;code&gt;install&lt;/code&gt;&lt;br&gt;6、找到复制到SD卡里面的&lt;code&gt;ElementalX.zip&lt;/code&gt;并点击&lt;br&gt;7、滑动&lt;code&gt;swpie to Confim Flash&lt;/code&gt; –&amp;gt;&lt;code&gt;next&lt;/code&gt;&lt;br&gt;8、选择- [x]&lt;code&gt;I Agree with these Terms of Use&lt;/code&gt;–&amp;gt;&lt;code&gt;next&lt;/code&gt;–&amp;gt;看到弹窗框&lt;code&gt;ok&lt;/code&gt;&lt;br&gt;9、连续点&lt;code&gt;next&lt;/code&gt;最后没了在选择点击&lt;code&gt;install ElementalX&lt;/code&gt;–&amp;gt;&lt;code&gt;finish&lt;/code&gt;&lt;br&gt;10、滑动&lt;code&gt;swipe to Unlock&lt;/code&gt;解锁&lt;br&gt;11、&lt;code&gt;Wipe Cache&amp;amp;Dalvik&lt;/code&gt;–&amp;gt;&lt;code&gt;Swipe to Wipe&lt;/code&gt;–&amp;gt;&lt;code&gt;Back&lt;/code&gt;&lt;br&gt;12、点击选择复制到SD卡里面的&lt;code&gt;SuperSu.zip&lt;/code&gt;–&amp;gt;&lt;code&gt;swipe to Confirm Flash&lt;/code&gt;&lt;br&gt;13、再次执行一边操作&lt;code&gt;Wipe Cache&amp;amp;Dalvik&lt;/code&gt;–&amp;gt;&lt;code&gt;Swipe to Wipe&lt;/code&gt;—&amp;gt;&lt;code&gt;Back&lt;/code&gt;&lt;br&gt;14、最后点击&lt;code&gt;Reboot System&lt;/code&gt;重启手机可以在桌面看到如下图我手机一样的SuperSu图标了&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nexus6" scheme="http://ningso.me/tags/Nexus6/"/>
    
      <category term="Android 6.0" scheme="http://ningso.me/tags/Android-6-0/"/>
    
      <category term="Root" scheme="http://ningso.me/tags/Root/"/>
    
  </entry>
  
</feed>
