[{"title":"Andorid Studio NDK快捷编译配置","date":"2017-07-19T14:16:00.000Z","path":"AndoridStudio-NDK-Quick-Build-configuration/","text":"Andorid Studio NDK快捷编译配置 接触Jni的时候，最繁琐的就是去生成.h头文件，以前很笨的方法就是通过javah工具生成.h头文件，还要各种指定路径等繁琐操作,写着写着就有点烦人。现在介绍一种更快捷的方式，通过配置快捷键的形式一劳永逸。 快捷配置效果预览 javah1234javahProgram:$JDKPath$/bin/javahParameters:-encoding UTF-8 -d ../jni -jni $FileClass$Working directory:$ModuleFileDir$/src/main/java ndk-build 1234ndk-buildProgram:/Users/Liam/Library/Android/sdk/ndk-bundle/build/ndk-buildParameters:Working directory:$ModuleFileDir$/src/main ndk-build clean1234ndk-build cleanProgram:/Users/Liam/Library/Android/sdk/ndk-bundle/build/ndk-buildParameters:cleanWorking directory:$ModuleFileDir$/src/main NDK开发常见的一些错误：Error 112UnsatisfiedLinkError: No implementation found for int com.liam.nativeplugin.nativeutils.SymLink.createSymLinkJNI(java.lang.String, java.lang.String) (tried Java_com_liam_nativeplugin_nativeutils_SymLink_createSymLinkJNI and Java_com_liam_nativeplugin_nativeutils_SymLink_createSymLinkJNI__Ljava_lang_String_2Ljava_lang_String_2) 这是刚接触的时候最会遇到的错误类型了，意思就是会所，.c文件定义的JNI接口类型是Java_com_liam_nativeplugin_nativeutils_SymLink_createSymLinkJNI 即包名必须为com.liam.nativeplugin.nativeutils,类名为必须为SymLink。也就是说，我们.so中函数声明涉及到的package name和class name与调用它的package name和class name不符。因此我们要改变我们工程中的package name和class name。使其与.so文件中函数签名提示的一致，在这个类中加入native方法的声明。知道了这个规则，那么错误解决方案自然也就懂了。修改正确的package name和class name重新编译一下就好了。","tags":[{"name":"NDK","slug":"NDK","permalink":"http://ningso.me/tags/NDK/"},{"name":"Jni","slug":"Jni","permalink":"http://ningso.me/tags/Jni/"}]},{"title":"git命令多敲就能记住了","date":"2017-04-01T10:37:57.000Z","path":"How-to-use-git/","text":"git查看某个文件的修改历史 git log –pretty=oneline filename git log filename 可以看到fileName相关的commit记录 git log -p filename 可以显示每次提交的diff只看某次提交中的某个文件变化，可以直接加上fileName git show c5e69804bbd9725b5dece57f8cbece4a96b9f80b filename git rm -r e fileName 删除git服务器追踪文件文件但不删除本地文件 Update a fork and restart it from the upstream git remote add upstream git@github.com:XXXXXXXX.git git fetch upstream git rebase upstream/master git pull upstream/master git push origin master git rebase –abort git 一个分支完全替换另一个分支 git checkout master git reset –hard upstream/master git push origin master –force cherry-pick的使用 git cherry-pick [commitID] 提取一个commit git cherry-pick [commitIDA]..[commitIDB] 从A到B的所有commit，但不包含A，包含B git cherry-pick [commitIDA]^..[commitIDB] 包含从A到B的所有commit，但包含A也包含B","tags":[{"name":"git","slug":"git","permalink":"http://ningso.me/tags/git/"}]},{"title":"使用Hexo过程中遇到的问题","date":"2017-01-19T14:16:00.000Z","path":"Hexo遇到的问题/","text":"执行npm install -g hexo-cli时报错：如下图提示没有/usr/local/lib/node_modules路径没有权限 解决方法：执行该命令行获取权限sudo chown -R $USER /usr/local/lib/node_modules 参考来源: npm throws error without sudo","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://ningso.me/tags/Hexo/"}]},{"title":"JobScheduler 遇到的一些小问题","date":"2017-01-19T14:16:00.000Z","path":"JobScheduler遇到的一些小问题/","text":"Working on Android Nougat在Android7.0上设置jobinfoBuilder.setPeriodic(5 * 1000);为5秒时，看到系统自己打印出来的logo,当时没太留意，然而问题出来了，我勒个去？？等了好久都没执行onStartJob()方法，但是看设置schedule()的时候确实返回的是成功啊。最后注意到这个结果！！ 12W/JobInfo: Specified interval for 1 is +5s0ms. Clamped to +15m0s0msW/JobInfo: Specified flex for 1 is +5s0ms. Clamped to +5m0s0ms 就是说指定周期间隔时间为5seconds，被强制指定为15minutes,指定弹性延迟时间为5seconds，被强制指定为5minutes！！这就日狗了。难道是因为Android Nuga的出了省电模式之后自己改了？？ 跟踪到API24源码我们发现：在JobInfo中设置了最小间隔时间和最小弹性时间，如果设置的比改值还小，则取默认值。。。千万只草泥马有没有。 1234567891011121314151617181920212223/* Minimum interval for a periodic job, in milliseconds. */ private static final long MIN_PERIOD_MILLIS = 15 * 60 * 1000L; // 15 minutes/* Minimum flex for a periodic job, in milliseconds. */ private static final long MIN_FLEX_MILLIS = 5 * 60 * 1000L; // 5 minutes /** * Set to the interval between occurrences of this job. This value is &lt;b&gt;not&lt;/b&gt; set if the * job does not recur periodically. */ public long getIntervalMillis() &#123; return intervalMillis &gt;= getMinPeriodMillis() ? intervalMillis : getMinPeriodMillis();//看！！这里！！ &#125;&lt;---省略若干无关代码---&gt; /** * Flex time for this job. Only valid if this is a periodic job. The job can * execute at any time in a window of flex length at the end of the period. */ public long getFlexMillis() &#123; long interval = getIntervalMillis(); long percentClamp = 5 * interval / 100; long clampedFlex = Math.max(flexMillis, Math.max(percentClamp, getMinFlexMillis()));//看！！这里！！ return clampedFlex &lt;= interval ? clampedFlex : interval; &#125; 在API为23的时候并没有这些，也就是说在24及以上版本会出现这样的问题。作为解决方法，如果作业间隔小于15分钟，可以使用以下代码以定期间隔调度作业。不过该方式只能被执行一次。 12345678910JobInfo jobInfo;if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123; jobInfo = new JobInfo.Builder(JOB_ID, serviceName) .setMinimumLatency(REFRESH_INTERVAL) .setExtras(bundle).build();&#125; else &#123; jobInfo = new JobInfo.Builder(JOB_ID, serviceName) .setPeriodic(REFRESH_INTERVAL) .setExtras(bundle).build();&#125; 参考链接： stackoverflow Android Open Source Issue setPersisted(true) 导致crash","tags":[{"name":"JobScheduler","slug":"JobScheduler","permalink":"http://ningso.me/tags/JobScheduler/"}]},{"title":"使用TexturePacker对资源图进行打包的两种方法","date":"2016-11-29T08:16:16.000Z","path":"TexturePacker/","text":"方式一：执行jar方式1java -jar runnable-texturepacker.jar [inputDir] [outputDir] [packFileName] 注意：第一个参数资源文件路径必填项，后面两参数为可选项runnable-texturepacker.jar下载 方式二：通过Android Studio的Gradle在项目全局build.gradle中引入环境 1234567891011buildscript &#123; repositories &#123; jcenter() &#125; dependencies &#123; classpath &apos;com.android.tools.build:gradle:2.2.2&apos; classpath &apos;com.badlogicgames.gdx:gdx-tools:1.9.4&apos; //版本号根据自己使用的libdgx来定。 // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files &#125;&#125; 12345678910111213// 定义一个变量texturePacker并设置想传递的参数...参数一：资源所在文件夹路径，参数二：生成的打包图片所存放的文件路径，参数三：packFileName包文件的名称。同时也作用于图片名。project.ext.texturePacker = [rootDir.getPath() + &quot;/app/src/main/atlas&quot;, rootDir.getPath() + &quot;/app/src/main/assets&quot;, &quot;atlas_flip&quot;]// 导入texturepacker的引用import com.badlogic.gdx.tools.texturepacker.TexturePacker// 添加一个生存进行图片资源打包的task task texturePacker &lt;&lt; &#123; if (project.ext.has(&apos;texturePacker&apos;)) &#123; logger.info &quot;Calling TexturePacker: &quot; + texturePacker TexturePacker.process(texturePacker[0], texturePacker[1], texturePacker[2]) &#125;&#125; 最后在执行这个task./gradlew texturePacker即可 参考来源:libgdx wiki","tags":[{"name":"TexturePacker","slug":"TexturePacker","permalink":"http://ningso.me/tags/TexturePacker/"},{"name":"Gradle","slug":"Gradle","permalink":"http://ningso.me/tags/Gradle/"},{"name":"Libgdx","slug":"Libgdx","permalink":"http://ningso.me/tags/Libgdx/"}]},{"title":"adb常用命令总结","date":"2016-06-23T15:26:13.000Z","path":"ADB常用命令总结/","text":"ADB命令 adb shell cat [file] 查看文件内容 adb shell service list 查看后台服务信息 adb push [local] [remote] 将电脑本地文件拷贝到手机设备 adb pull [remote] [local] 把文件从设备复制到本地电脑 adb shell monkey -v -p [packagename] 500 执行monkey命令 adb shell dumpsys activity top 查看栈顶activity的信息 adb shell dumpsys activity | grep mFocusedActivities 只查看栈顶Activity名称 adb shell pm clear [packagename] 清除应用数据 adb shell ifconfig [|grep addr]查看ip等地址信息 AAPT命令 Android asset packaging tool aapt list filepath.apk 列出apk的所有资源文件目录清单 aapt list -v filepath.apk aapt d[ump] [values] file.{apk} 下面的四个参值为values的值 badging 查看apk的包名，laber 权限等所有信息 permissions 查看apk权限 resources 打印的所有资源文件列表 configurations 查看apk配置信息 终端命令更新SDK android list sdk 查看已安装完成的包 android list sdk –all 列举出所有可安装更新包的序列号 android update sdk –no-ui –filter 1,2,3… 下载更新对应序列号的包","tags":[{"name":"ADB","slug":"ADB","permalink":"http://ningso.me/tags/ADB/"}]},{"title":"KeyTool的基本使用方式","date":"2016-02-02T15:52:42.000Z","path":"How-To-Use-KeyTool/","text":"keytool 创建签名keystore1keytool -genkey -alias Test -keyalg RSA -sigalg SHA1withRSA -validity 8030 -keystore ./xxxx.keystore -dname &quot;EMAILADDRESS=android.os@samsung.com, CN=Samsung Cert, OU=DMC, O=Samsung Corporation, L=Suwon City, ST=South Korea, C=KR&quot; -dname 指定证书拥有者信息 例如： “CN=名字与姓氏,OU=组织单位名称,O=组织名称,L=城市或区域名称,ST=州或省份名称,C=单位的两字母国家代码” 结果: Keytool 查看keystore的签名信息执行如下命令，并按照提示输入keystore 密码 1keytool -list -v -keystore XXXX.keystore 结果： Keytool 查看apk的签名信息解压apk得到META-INF文件夹下面的RSA文件，执行如下命令1keytool -printcert -file XXX/META-INF/CERT.RSA 结果：","tags":[{"name":"KeyTool","slug":"KeyTool","permalink":"http://ningso.me/tags/KeyTool/"}]},{"title":"How to Root Nexus6 Devices on Android Marshmallow 6.0","date":"2015-12-19T14:16:16.000Z","path":"How-to-Root-on-Nexus6-Android6-0/","text":"教程 网页教程 视频教程 材料准备 下载twrp包 下载supperSu 和elementalX 包 操作 1、将SuperSu.zip和ElementalX.zip复制到ni的sd卡的目录下2、将手机关机进入到Bootloader模式，并将数据线连接电脑（安装包adb环境）3、执行 fastboot flash recovery twrp-2.8.7.1-shamu.img4、然后拔去数据线连接，用手机音量减键选择Recovery mode并确认进入5、滑动swipe to Allow Modifications –&gt;点击install6、找到复制到SD卡里面的ElementalX.zip并点击7、滑动swpie to Confim Flash –&gt;next8、选择- [x]I Agree with these Terms of Use–&gt;next–&gt;看到弹窗框ok9、连续点next最后没了在选择点击install ElementalX–&gt;finish10、滑动swipe to Unlock解锁11、Wipe Cache&amp;Dalvik–&gt;Swipe to Wipe–&gt;Back12、点击选择复制到SD卡里面的SuperSu.zip–&gt;swipe to Confirm Flash13、再次执行一边操作Wipe Cache&amp;Dalvik–&gt;Swipe to Wipe—&gt;Back14、最后点击Reboot System重启手机可以在桌面看到如下图我手机一样的SuperSu图标了 以上步骤都是根据视屏里面讲解来的，翻不了墙没办法打开Youtube视频的可以直接安装上面操作步骤来做。 如有不懂欢迎留言","tags":[{"name":"Nexus6","slug":"Nexus6","permalink":"http://ningso.me/tags/Nexus6/"},{"name":"Android 6.0","slug":"Android-6-0","permalink":"http://ningso.me/tags/Android-6-0/"},{"name":"Root","slug":"Root","permalink":"http://ningso.me/tags/Root/"}]}]